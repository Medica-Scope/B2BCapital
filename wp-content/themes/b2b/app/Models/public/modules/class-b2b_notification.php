<?php
    /**
     * @Filename: class-b2b_notification.php
     * @Description:
     * @User: NINJA MASTER - Mustafa Shaaban
     * @Date: 5/10/2023
     */


    namespace B2B\APP\MODELS\FRONT\MODULES;

    use B2B\APP\CLASSES\B2b_Module;
    use B2B\APP\CLASSES\B2b_Post;
    use B2B\APP\CLASSES\B2b_User;
    use B2B\APP\HELPERS\B2b_Ajax_Response;
    use B2B\B2b;
    use WP_Post;


    /**
     * Title
     * Content
     * Thumbnail
     * Date
     * Count New Notifications
     * Remove
     * Read
     *
     */


    /**
     * Description...
     *
     * @class B2b_Partner
     * @version 1.0
     * @since 1.0.0
     * @package b2b
     * @author Mustafa Shaaban
     */
    class B2b_Notification extends B2b_Module
    {
        public array $meta_data = [
            'notification_data',
            'new',
        ];

        public array $taxonomy = [];

        public function __construct()
        {
            parent::__construct('notification');
        }

        /**
         * Description...
         *
         * @param \WP_Post $post
         * @param array    $meta_data
         *
         * @version 1.0
         * @since 1.0.0
         * @package b2b
         * @author Mustafa Shaaban
         * @return \B2B\APP\CLASSES\B2b_Post
         */
        public function convert(WP_Post $post, array $meta_data = []): B2b_Post
        {
            return parent::convert($post, $this->meta_data); // TODO: Change the autogenerated stub
        }

        /**
         * @inheritDoc
         */
        protected function actions($module_name): void
        {
            // TODO: Implement actions() method.
            $this->hooks->add_action('wp_ajax_' . B2b::_DOMAIN_NAME . '_read_notifications_ajax', $this, 'read_ajax');
            $this->hooks->add_action('wp_ajax_nopriv_' . B2b::_DOMAIN_NAME . '_read_notifications_ajax', $this, 'read_ajax');
            $this->hooks->add_action('wp_ajax_' . B2b::_DOMAIN_NAME . '_loadmore_notifications_ajax', $this, 'loadmore_notifications_ajax');
            $this->hooks->add_action('wp_ajax_nopriv_' . B2b::_DOMAIN_NAME . '_loadmore_notifications_ajax', $this, 'loadmore_notifications_ajax');
        }

        /**
         * @inheritDoc
         */
        protected function filters($module_name): void
        {
            // TODO: Implement filters() method.
        }

        /**
         * Description...
         * @version 1.0
         * @since 1.0.0
         * @package b2b
         * @author Mustafa Shaaban
         * @return array
         * @throws \Exception
         */
        public function get_notifications(): array
        {
            global $wpdb, $user_ID;

            $all      = $this->get_all_custom([ 'publish' ], 1);
            $html_obj = [
                'notifications' => []
            ];
            foreach ($all as $single) {
                $html_obj['notifications'][] = $this->notification_html($single);
            }
            $html_obj['new_count'] = $this->get_notifications_count();
            return $html_obj;
        }

        public function get_notifications_count(): string
        {
            global $wpdb, $user_ID;

            $new_count = $wpdb->get_var("
                                                            SELECT COUNT(*) 
                                                            FROM `" . $wpdb->prefix . "posts`
                                                            INNER JOIN `" . $wpdb->prefix . "postmeta` ON (`" . $wpdb->prefix . "posts`.ID = `" . $wpdb->prefix . "postmeta`.post_id) 
                                                            WHERE `" . $wpdb->prefix . "posts`.post_status = 'publish'
                                                            AND `" . $wpdb->prefix . "posts`.post_type = '$this->type'
                                                            AND `" . $wpdb->prefix . "posts`.post_author = '$user_ID'
                                                            AND `" . $wpdb->prefix . "postmeta`.meta_key = 'new'
                                                            AND `" . $wpdb->prefix . "postmeta`.meta_value = '1'
                                                        ");
            return $new_count;
        }

        /**
         * Description...
         *
         * @param array $status
         * @param int   $limit
         *
         * @return array
         * @version 1.0
         * @since 1.0.0
         * @package b2b
         * @author Mustafa Shaaban
         */
        public function get_all_custom(array $status = [ 'any' ], int $limit = 10): array
        {
            global $user_ID;
            $posts     = new \WP_Query([
                "post_type"      => $this->module,
                "post_status"    => $status,
                "posts_per_page" => $limit,
                "author"         => $user_ID,
                "orderby"        => 'ID',
                "order"          => 'DESC',
            ]);
            $B2b_Posts = [];

            foreach ($posts->get_posts() as $post) {
                $class       = __CLASS__;
                $b2b_module  = new $class;
                $B2b_Posts[] = $b2b_module->assign($this->convert($post, $this->meta_data));
            }

            return $B2b_Posts;
        }

        public function send(int $from = 0, int $to = 0, string $type = '', array $data = []): void
        {
            switch ($type) {
                case 'bidding':
                    $user                                 = B2b_User::get_user_by('ID', $from);
                    $this->title                          = __("New Bidding", 'b2b');
                    $this->content                        = __('You have a new bidding from <strong>%s</strong> on your project <strong>%s</strong>', 'b2b');
                    $this->author                         = $to;
                    $this->meta_data['notification_data'] = [
                        'type'       => 'bidding',
                        'from'       => $user->display_name,
                        'project_id' => $data['project_id'],
                    ];
                    $this->meta_data['new']               = 1;
                    $this->insert();
                    break;
                default:
                    break;
            }
        }

        /**
         * @throws \Exception
         */
        public function notification_html(B2b_Notification $notification): \stdClass
        {
            $type      = $notification->meta_data['notification_data']['type'];
            $formatted = new \stdClass();

            switch ($type) {
                case 'bidding':
                    $opportunity_obj = new B2b_Opportunity();
                    $opportunity_id  = wpml_object_id_filter($notification->meta_data['notification_data']['project_id'], $opportunity_obj->type, FALSE, B2B_lANG);
                    $opportunity     = $opportunity_obj->get_by_id($opportunity_id);

                    $formatted->ID        = $notification->ID;
                    $formatted->title     = __($notification->title, 'b2b');
                    $formatted->content   = sprintf(__($notification->content, 'b2b'), $notification->meta_data['notification_data']['from'], $opportunity->title);
                    $formatted->thumbnail = $opportunity->thumbnail;
                    $formatted->url       = apply_filters('b2bml_permalink', $opportunity->link);
                    $formatted->date      = $this->time_elapsed_string($notification->created_date);
                    $formatted->new       = (int)$notification->meta_data['new'];
                    break;
                default:
                    break;
            }

            return $formatted;
        }

        public function get_counter()
        {

        }

        public function remove()
        {

        }

        public function read_ajax(): void
        {
            $form_data = $_POST['data'];
            $IDs       = $form_data['IDs'];

            $notifications = $this->get_by_ids($IDs);
            foreach ($notifications as $notification) {
                $notification->set_meta_data('new', 0);
                $notification->update();
            }

            new B2b_Ajax_Response(TRUE, __('Notifications status has been changed successfully', 'b2b'), [
                'count' => $this->get_notifications_count()
            ]);
        }

        public function loadmore_notifications_ajax(): void
        {
            $form_data = $_POST['data'];
            $page      = intval($form_data['page']);

            $notifications = $this->load_more([ 'publish' ], $page, 1);

            $last = FALSE;

            if ($page * 1 >= $notifications['count']) {
                $last = TRUE;
            }

            ob_start();
            foreach ($notifications as $key => $notification) {
                if ('count' === $key) {
                    continue;
                }
                get_template_part('app/Views/template-parts/notifications/notification', 'ajax', [ 'data' => $notification ]);
            }

            $html = ob_get_clean();

            new B2b_Ajax_Response(TRUE, __('Successful Response!', 'b2b'), [
                'html' => $html,
                'page' => $page + 1,
                'last' => (int)$last
            ]);
        }

        /**
         * @throws \Exception
         */
        public function time_elapsed_string(string $datetime, $full = FALSE): string
        {
            date_default_timezone_set('Africa/Cairo');
            $now  = new \DateTime;
            $ago  = new \DateTime($datetime);
            $diff = $now->diff($ago);

            $diff->w = floor($diff->d / 7);
            $diff->d -= $diff->w * 7;

            $string = [
                'y' => __('y', 'b2b'),
                'm' => __('m', 'b2b'),
                'w' => __('w', 'b2b'),
                'd' => __('d', 'b2b'),
                'h' => __('h', 'b2b'),
                'i' => __('m', 'b2b'),
                's' => __('s', 'b2b'),
            ];

            foreach ($string as $k => &$v) {
                if ($diff->$k) {
                    $v = $diff->$k . $v;
                } else {
                    unset($string[$k]);
                }
            }

            if (!$full)
                $string = array_slice($string, 0, 1);

            return $string ? implode(', ', $string) . ' ' . __('ago', 'b2b') : __('just now', 'b2b');
        }
    }
